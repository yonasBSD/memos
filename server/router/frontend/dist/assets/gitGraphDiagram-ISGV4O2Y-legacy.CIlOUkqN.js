System.register(["./chunk-IUKPXING-legacy.Dqsi3ih4.js","./chunk-66XRIAFR-legacy.sTrznmcv.js","./mermaid-vendor-legacy.CXJ3QjYr.js","./gitGraph-YCYPL57B-legacy.hOY-hteK.js","./react-vendor-legacy.dIDhV_HT.js","./utils-vendor-legacy.4FVC2SsJ.js"],(function(t,r){"use strict";var e,n,o,a,c,s,i,h,d,$,m,l,g,y,p,x,f,u,b,w,B;return{setters:[t=>{e=t.p},t=>{n=t.I},t=>{o=t._,a=t.v,c=t.t,s=t.s,i=t.g,h=t.a,d=t.b,$=t.l,m=t.c,l=t.e,g=t.u,y=t.F,p=t.A,x=t.m,f=t.G,u=t.H,b=t.I,w=t.K},t=>{B=t.p},null,null],execute:function(){var r={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},E=b.gitGraph,k=o((()=>f({...E,...u().gitGraph})),"getConfig"),C=new n((()=>{const t=k(),r=t.mainBranchName,e=t.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:e}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}}));function L(){return w({length:7})}function T(t,r){const e=Object.create(null);return t.reduce(((t,n)=>{const o=r(n);return e[o]||(e[o]=!0,t.push(n)),t}),[])}o(L,"getID"),o(T,"uniqBy");var M=o((function(t){C.records.direction=t}),"setDirection"),v=o((function(t){$.debug("options str",t),t=t?.trim(),t=t||"{}";try{C.records.options=JSON.parse(t)}catch(r){$.error("error while parsing gitGraph options",r.message)}}),"setOptions"),P=o((function(){return C.records.options}),"getOptions"),R=o((function(t){let e=t.msg,n=t.id;const o=t.type;let a=t.tags;$.info("commit",e,n,o,a),$.debug("Entering commit:",e,n,o,a);const c=k();n=x.sanitizeText(n,c),e=x.sanitizeText(e,c),a=a?.map((t=>x.sanitizeText(t,c)));const s={id:n||C.records.seq+"-"+L(),message:e,seq:C.records.seq++,type:o??r.NORMAL,tags:a??[],parents:null==C.records.head?[]:[C.records.head.id],branch:C.records.currBranch};C.records.head=s,$.info("main branch",c.mainBranchName),C.records.commits.set(s.id,s),C.records.branches.set(C.records.currBranch,s.id),$.debug("in pushCommit "+s.id)}),"commit"),I=o((function(t){let r=t.name;const e=t.order;if(r=x.sanitizeText(r,k()),C.records.branches.has(r))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${r}")`);C.records.branches.set(r,null!=C.records.head?C.records.head.id:null),C.records.branchConfig.set(r,{name:r,order:e}),O(r),$.debug("in createBranch")}),"branch"),A=o((t=>{let e=t.branch,n=t.id;const o=t.type,a=t.tags,c=k();e=x.sanitizeText(e,c),n&&(n=x.sanitizeText(n,c));const s=C.records.branches.get(C.records.currBranch),i=C.records.branches.get(e),h=s?C.records.commits.get(s):void 0,d=i?C.records.commits.get(i):void 0;if(h&&d&&h.branch===e)throw new Error(`Cannot merge branch '${e}' into itself.`);if(C.records.currBranch===e){const t=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(void 0===h||!h){const t=new Error(`Incorrect usage of "merge". Current branch (${C.records.currBranch})has no commits`);throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["commit"]},t}if(!C.records.branches.has(e)){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") does not exist");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:[`branch ${e}`]},t}if(void 0===d||!d){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") has no commits");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:['"commit"']},t}if(h===d){const t=new Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(n&&C.records.commits.has(n)){const t=new Error('Incorrect usage of "merge". Commit with id:'+n+" already exists, use different custom Id");throw t.hash={text:`merge ${e} ${n} ${o} ${a?.join(" ")}`,token:`merge ${e} ${n} ${o} ${a?.join(" ")}`,expected:[`merge ${e} ${n}_UNIQUE ${o} ${a?.join(" ")}`]},t}const m=i||"",l={id:n||`${C.records.seq}-${L()}`,message:`merged branch ${e} into ${C.records.currBranch}`,seq:C.records.seq++,parents:null==C.records.head?[]:[C.records.head.id,m],branch:C.records.currBranch,type:r.MERGE,customType:o,customId:!!n,tags:a??[]};C.records.head=l,C.records.commits.set(l.id,l),C.records.branches.set(C.records.currBranch,l.id),$.debug(C.records.branches),$.debug("in mergeBranch")}),"merge"),G=o((function(t){let e=t.id,n=t.targetId,o=t.tags,a=t.parent;$.debug("Entering cherryPick:",e,n,o);const c=k();if(e=x.sanitizeText(e,c),n=x.sanitizeText(n,c),o=o?.map((t=>x.sanitizeText(t,c))),a=x.sanitizeText(a,c),!e||!C.records.commits.has(e)){const t=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${e} ${n}`,token:`cherryPick ${e} ${n}`,expected:["cherry-pick abc"]},t}const s=C.records.commits.get(e);if(void 0===s||!s)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(a&&(!Array.isArray(s.parents)||!s.parents.includes(a)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const i=s.branch;if(s.type===r.MERGE&&!a)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!n||!C.records.commits.has(n)){if(i===C.records.currBranch){const t=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${e} ${n}`,token:`cherryPick ${e} ${n}`,expected:["cherry-pick abc"]},t}const t=C.records.branches.get(C.records.currBranch);if(void 0===t||!t){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${C.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${n}`,token:`cherryPick ${e} ${n}`,expected:["cherry-pick abc"]},t}const c=C.records.commits.get(t);if(void 0===c||!c){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${C.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${n}`,token:`cherryPick ${e} ${n}`,expected:["cherry-pick abc"]},t}const h={id:C.records.seq+"-"+L(),message:`cherry-picked ${s?.message} into ${C.records.currBranch}`,seq:C.records.seq++,parents:null==C.records.head?[]:[C.records.head.id,s.id],branch:C.records.currBranch,type:r.CHERRY_PICK,tags:o?o.filter(Boolean):[`cherry-pick:${s.id}${s.type===r.MERGE?`|parent:${a}`:""}`]};C.records.head=h,C.records.commits.set(h.id,h),C.records.branches.set(C.records.currBranch,h.id),$.debug(C.records.branches),$.debug("in cherryPick")}}),"cherryPick"),O=o((function(t){if(t=x.sanitizeText(t,k()),!C.records.branches.has(t)){const r=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw r.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},r}{C.records.currBranch=t;const r=C.records.branches.get(C.records.currBranch);C.records.head=void 0!==r&&r?C.records.commits.get(r)??null:null}}),"checkout");function q(t,r,e){const n=t.indexOf(r);-1===n?t.push(e):t.splice(n,1,e)}function H(t){const r=t.reduce(((t,r)=>t.seq>r.seq?t:r),t[0]);let e="";t.forEach((function(t){e+=t===r?"\t*":"\t|"}));const n=[e,r.id,r.seq];for(const o in C.records.branches)C.records.branches.get(o)===r.id&&n.push(o);if($.debug(n.join(" ")),r.parents&&2==r.parents.length&&r.parents[0]&&r.parents[1]){const e=C.records.commits.get(r.parents[0]);q(t,r,e),r.parents[1]&&t.push(C.records.commits.get(r.parents[1]))}else{if(0==r.parents.length)return;if(r.parents[0]){const e=C.records.commits.get(r.parents[0]);q(t,r,e)}}H(t=T(t,(t=>t.id)))}o(q,"upsert"),o(H,"prettyPrintCommitHistory");var z=o((function(){$.debug(C.records.commits),H([W()[0]])}),"prettyPrint"),j=o((function(){C.reset(),p()}),"clear"),S=o((function(){return[...C.records.branchConfig.values()].map(((t,r)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${r}`)})).sort(((t,r)=>(t.order??0)-(r.order??0))).map((({name:t})=>({name:t})))}),"getBranchesAsObjArray"),N=o((function(){return C.records.branches}),"getBranches"),D=o((function(){return C.records.commits}),"getCommits"),W=o((function(){const t=[...C.records.commits.values()];return t.forEach((function(t){$.debug(t.id)})),t.sort(((t,r)=>t.seq-r.seq)),t}),"getCommitsArray"),F={commitType:r,getConfig:k,setDirection:M,setOptions:v,getOptions:P,commit:R,branch:I,merge:A,cherryPick:G,checkout:O,prettyPrint:z,clear:j,getBranchesAsObjArray:S,getBranches:N,getCommits:D,getCommitsArray:W,getCurrentBranch:o((function(){return C.records.currBranch}),"getCurrentBranch"),getDirection:o((function(){return C.records.direction}),"getDirection"),getHead:o((function(){return C.records.head}),"getHead"),setAccTitle:d,getAccTitle:h,getAccDescription:i,setAccDescription:s,setDiagramTitle:c,getDiagramTitle:a},K=o(((t,r)=>{e(t,r),t.dir&&r.setDirection(t.dir);for(const e of t.statements)Y(e,r)}),"populate"),Y=o(((t,r)=>{const e={Commit:o((t=>r.commit(_(t))),"Commit"),Branch:o((t=>r.branch(U(t))),"Branch"),Merge:o((t=>r.merge(V(t))),"Merge"),Checkout:o((t=>r.checkout(X(t))),"Checkout"),CherryPicking:o((t=>r.cherryPick(J(t))),"CherryPicking")}[t.$type];e?e(t):$.error(`Unknown statement type: ${t.$type}`)}),"parseStatement"),_=o((t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?r[t.type]:r.NORMAL,tags:t.tags??void 0})),"parseCommit"),U=o((t=>({name:t.name,order:t.order??0})),"parseBranch"),V=o((t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?r[t.type]:void 0,tags:t.tags??void 0})),"parseMerge"),X=o((t=>t.branch),"parseCheckout"),J=o((t=>({id:t.id,targetId:"",tags:0===t.tags?.length?void 0:t.tags,parent:t.parent})),"parseCherryPicking"),Q={parse:o((async t=>{const r=await B("gitGraph",t);$.debug(r),K(r,F)}),"parse")},Z=m(),tt=Z?.gitGraph,rt=10,et=40,nt=new Map,ot=new Map,at=new Map,ct=[],st=0,it="LR",ht=o((()=>{nt.clear(),ot.clear(),at.clear(),st=0,ct=[],it="LR"}),"clear"),dt=o((t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach((t=>{const e=document.createElementNS("http://www.w3.org/2000/svg","tspan");e.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),e.setAttribute("dy","1em"),e.setAttribute("x","0"),e.setAttribute("class","row"),e.textContent=t.trim(),r.appendChild(e)})),r}),"drawText"),$t=o((t=>{let r,e,n;return"BT"===it?(e=o(((t,r)=>t<=r),"comparisonFunc"),n=1/0):(e=o(((t,r)=>t>=r),"comparisonFunc"),n=0),t.forEach((t=>{const o="TB"===it||"BT"==it?ot.get(t)?.y:ot.get(t)?.x;void 0!==o&&e(o,n)&&(r=t,n=o)})),r}),"findClosestParent"),mt=o((t=>{let r="",e=1/0;return t.forEach((t=>{const n=ot.get(t).y;n<=e&&(r=t,e=n)})),r||void 0}),"findClosestParentBT"),lt=o(((t,r,e)=>{let n=e,o=e;const a=[];t.forEach((t=>{const e=r.get(t);if(!e)throw new Error(`Commit not found for key ${t}`);e.parents.length?(n=yt(e),o=Math.max(n,o)):a.push(e),pt(e,n)})),n=o,a.forEach((t=>{xt(t,n,e)})),t.forEach((t=>{const e=r.get(t);if(e?.parents.length){const t=mt(e.parents);n=ot.get(t).y-et,n<=o&&(o=n);const r=nt.get(e.branch).pos,a=n-rt;ot.set(e.id,{x:r,y:a})}}))}),"setParallelBTPos"),gt=o((t=>{const r=$t(t.parents.filter((t=>null!==t)));if(!r)throw new Error(`Closest parent not found for commit ${t.id}`);const e=ot.get(r)?.y;if(void 0===e)throw new Error(`Closest parent position not found for commit ${t.id}`);return e}),"findClosestParentPos"),yt=o((t=>gt(t)+et),"calculateCommitPosition"),pt=o(((t,r)=>{const e=nt.get(t.branch);if(!e)throw new Error(`Branch not found for commit ${t.id}`);const n=e.pos,o=r+rt;return ot.set(t.id,{x:n,y:o}),{x:n,y:o}}),"setCommitPosition"),xt=o(((t,r,e)=>{const n=nt.get(t.branch);if(!n)throw new Error(`Branch not found for commit ${t.id}`);const o=r+e,a=n.pos;ot.set(t.id,{x:a,y:o})}),"setRootPosition"),ft=o(((t,e,n,o,a,c)=>{if(c===r.HIGHLIGHT)t.append("rect").attr("x",n.x-10).attr("y",n.y-10).attr("width",20).attr("height",20).attr("class",`commit ${e.id} commit-highlight${a%8} ${o}-outer`),t.append("rect").attr("x",n.x-6).attr("y",n.y-6).attr("width",12).attr("height",12).attr("class",`commit ${e.id} commit${a%8} ${o}-inner`);else if(c===r.CHERRY_PICK)t.append("circle").attr("cx",n.x).attr("cy",n.y).attr("r",10).attr("class",`commit ${e.id} ${o}`),t.append("circle").attr("cx",n.x-3).attr("cy",n.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${o}`),t.append("circle").attr("cx",n.x+3).attr("cy",n.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${o}`),t.append("line").attr("x1",n.x+3).attr("y1",n.y+1).attr("x2",n.x).attr("y2",n.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${o}`),t.append("line").attr("x1",n.x-3).attr("y1",n.y+1).attr("x2",n.x).attr("y2",n.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${o}`);else{const s=t.append("circle");if(s.attr("cx",n.x),s.attr("cy",n.y),s.attr("r",e.type===r.MERGE?9:10),s.attr("class",`commit ${e.id} commit${a%8}`),c===r.MERGE){const r=t.append("circle");r.attr("cx",n.x),r.attr("cy",n.y),r.attr("r",6),r.attr("class",`commit ${o} ${e.id} commit${a%8}`)}c===r.REVERSE&&t.append("path").attr("d",`M ${n.x-5},${n.y-5}L${n.x+5},${n.y+5}M${n.x-5},${n.y+5}L${n.x+5},${n.y-5}`).attr("class",`commit ${o} ${e.id} commit${a%8}`)}}),"drawCommitBullet"),ut=o(((t,e,n,o)=>{if(e.type!==r.CHERRY_PICK&&(e.customId&&e.type===r.MERGE||e.type!==r.MERGE)&&tt?.showCommitLabel){const r=t.append("g"),a=r.insert("rect").attr("class","commit-label-bkg"),c=r.append("text").attr("x",o).attr("y",n.y+25).attr("class","commit-label").text(e.id),s=c.node()?.getBBox();if(s&&(a.attr("x",n.posWithOffset-s.width/2-2).attr("y",n.y+13.5).attr("width",s.width+4).attr("height",s.height+4),"TB"===it||"BT"===it?(a.attr("x",n.x-(s.width+16+5)).attr("y",n.y-12),c.attr("x",n.x-(s.width+16)).attr("y",n.y+s.height-12)):c.attr("x",n.posWithOffset-s.width/2),tt.rotateCommitLabel))if("TB"===it||"BT"===it)c.attr("transform","rotate(-45, "+n.x+", "+n.y+")"),a.attr("transform","rotate(-45, "+n.x+", "+n.y+")");else{const t=-7.5-(s.width+10)/25*9.5,e=10+s.width/25*8.5;r.attr("transform","translate("+t+", "+e+") rotate(-45, "+o+", "+n.y+")")}}}),"drawCommitLabel"),bt=o(((t,r,e,n)=>{if(r.tags.length>0){let o=0,a=0,c=0;const s=[];for(const n of r.tags.reverse()){const r=t.insert("polygon"),i=t.append("circle"),h=t.append("text").attr("y",e.y-16-o).attr("class","tag-label").text(n),d=h.node()?.getBBox();if(!d)throw new Error("Tag bbox not found");a=Math.max(a,d.width),c=Math.max(c,d.height),h.attr("x",e.posWithOffset-d.width/2),s.push({tag:h,hole:i,rect:r,yOffset:o}),o+=20}for(const{tag:t,hole:r,rect:i,yOffset:h}of s){const o=c/2,s=e.y-19.2-h;if(i.attr("class","tag-label-bkg").attr("points",`\n      ${n-a/2-2},${s+2}  \n      ${n-a/2-2},${s-2}\n      ${e.posWithOffset-a/2-4},${s-o-2}\n      ${e.posWithOffset+a/2+4},${s-o-2}\n      ${e.posWithOffset+a/2+4},${s+o+2}\n      ${e.posWithOffset-a/2-4},${s+o+2}`),r.attr("cy",s).attr("cx",n-a/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===it||"BT"===it){const c=n+h;i.attr("class","tag-label-bkg").attr("points",`\n        ${e.x},${c+2}\n        ${e.x},${c-2}\n        ${e.x+rt},${c-o-2}\n        ${e.x+rt+a+4},${c-o-2}\n        ${e.x+rt+a+4},${c+o+2}\n        ${e.x+rt},${c+o+2}`).attr("transform","translate(12,12) rotate(45, "+e.x+","+n+")"),r.attr("cx",e.x+2).attr("cy",c).attr("transform","translate(12,12) rotate(45, "+e.x+","+n+")"),t.attr("x",e.x+5).attr("y",c+3).attr("transform","translate(14,14) rotate(45, "+e.x+","+n+")")}}}}),"drawCommitTags"),wt=o((t=>{switch(t.customType??t.type){case r.NORMAL:return"commit-normal";case r.REVERSE:return"commit-reverse";case r.HIGHLIGHT:return"commit-highlight";case r.MERGE:return"commit-merge";case r.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}}),"getCommitClassType"),Bt=o(((t,r,e,n)=>{const o={x:0,y:0};if(!(t.parents.length>0))return"TB"===r?30:"BT"===r?(n.get(t.id)??o).y-et:0;{const e=$t(t.parents);if(e){const a=n.get(e)??o;return"TB"===r?a.y+et:"BT"===r?(n.get(t.id)??o).y-et:a.x+et}}return 0}),"calculatePosition"),Et=o(((t,r,e)=>{const n="BT"===it&&e?r:r+rt,o="TB"===it||"BT"===it?n:nt.get(t.branch)?.pos,a="TB"===it||"BT"===it?nt.get(t.branch)?.pos:n;if(void 0===a||void 0===o)throw new Error(`Position were undefined for commit ${t.id}`);return{x:a,y:o,posWithOffset:n}}),"getCommitPosition"),kt=o(((t,r,e)=>{if(!tt)throw new Error("GitGraph config not found");const n=t.append("g").attr("class","commit-bullets"),a=t.append("g").attr("class","commit-labels");let c="TB"===it||"BT"===it?30:0;const s=[...r.keys()],i=tt?.parallelCommits??!1,h=o(((t,e)=>{const n=r.get(t)?.seq,o=r.get(e)?.seq;return void 0!==n&&void 0!==o?n-o:0}),"sortKeys");let d=s.sort(h);"BT"===it&&(i&&lt(d,r,c),d=d.reverse()),d.forEach((t=>{const o=r.get(t);if(!o)throw new Error(`Commit not found for key ${t}`);i&&(c=Bt(o,it,c,ot));const s=Et(o,c,i);if(e){const t=wt(o),r=o.customType??o.type,e=nt.get(o.branch)?.index??0;ft(n,o,s,t,e,r),ut(a,o,s,c),bt(a,o,s,c)}"TB"===it||"BT"===it?ot.set(o.id,{x:s.x,y:s.posWithOffset}):ot.set(o.id,{x:s.posWithOffset,y:s.y}),c="BT"===it&&i?c+et:c+et+rt,c>st&&(st=c)}))}),"drawCommits"),Ct=o(((t,r,e,n,a)=>{const c=("TB"===it||"BT"===it?e.x<n.x:e.y<n.y)?r.branch:t.branch,s=o((t=>t.branch===c),"isOnBranchToGetCurve"),i=o((e=>e.seq>t.seq&&e.seq<r.seq),"isBetweenCommits");return[...a.values()].some((t=>i(t)&&s(t)))}),"shouldRerouteArrow"),Lt=o(((t,r,e=0)=>{const n=t+Math.abs(t-r)/2;if(e>5)return n;if(ct.every((t=>Math.abs(t-n)>=10)))return ct.push(n),n;const o=Math.abs(t-r);return Lt(t,r-o/5,e+1)}),"findLane"),Tt=o(((t,e,n,o)=>{const a=ot.get(e.id),c=ot.get(n.id);if(void 0===a||void 0===c)throw new Error(`Commit positions not found for commits ${e.id} and ${n.id}`);const s=Ct(e,n,a,c,o);let i,h="",d="",$=0,m=0,l=nt.get(n.branch)?.index;if(n.type===r.MERGE&&e.id!==n.parents[0]&&(l=nt.get(e.branch)?.index),s){h="A 10 10, 0, 0, 0,",d="A 10 10, 0, 0, 1,",$=10,m=10;const t=a.y<c.y?Lt(a.y,c.y):Lt(c.y,a.y),r=a.x<c.x?Lt(a.x,c.x):Lt(c.x,a.x);"TB"===it?a.x<c.x?i=`M ${a.x} ${a.y} L ${r-$} ${a.y} ${d} ${r} ${a.y+m} L ${r} ${c.y-$} ${h} ${r+m} ${c.y} L ${c.x} ${c.y}`:(l=nt.get(e.branch)?.index,i=`M ${a.x} ${a.y} L ${r+$} ${a.y} ${h} ${r} ${a.y+m} L ${r} ${c.y-$} ${d} ${r-m} ${c.y} L ${c.x} ${c.y}`):"BT"===it?a.x<c.x?i=`M ${a.x} ${a.y} L ${r-$} ${a.y} ${h} ${r} ${a.y-m} L ${r} ${c.y+$} ${d} ${r+m} ${c.y} L ${c.x} ${c.y}`:(l=nt.get(e.branch)?.index,i=`M ${a.x} ${a.y} L ${r+$} ${a.y} ${d} ${r} ${a.y-m} L ${r} ${c.y+$} ${h} ${r-m} ${c.y} L ${c.x} ${c.y}`):a.y<c.y?i=`M ${a.x} ${a.y} L ${a.x} ${t-$} ${h} ${a.x+m} ${t} L ${c.x-$} ${t} ${d} ${c.x} ${t+m} L ${c.x} ${c.y}`:(l=nt.get(e.branch)?.index,i=`M ${a.x} ${a.y} L ${a.x} ${t+$} ${d} ${a.x+m} ${t} L ${c.x-$} ${t} ${h} ${c.x} ${t-m} L ${c.x} ${c.y}`)}else h="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",$=20,m=20,"TB"===it?(a.x<c.x&&(i=n.type===r.MERGE&&e.id!==n.parents[0]?`M ${a.x} ${a.y} L ${a.x} ${c.y-$} ${h} ${a.x+m} ${c.y} L ${c.x} ${c.y}`:`M ${a.x} ${a.y} L ${c.x-$} ${a.y} ${d} ${c.x} ${a.y+m} L ${c.x} ${c.y}`),a.x>c.x&&(h="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",$=20,m=20,i=n.type===r.MERGE&&e.id!==n.parents[0]?`M ${a.x} ${a.y} L ${a.x} ${c.y-$} ${d} ${a.x-m} ${c.y} L ${c.x} ${c.y}`:`M ${a.x} ${a.y} L ${c.x+$} ${a.y} ${h} ${c.x} ${a.y+m} L ${c.x} ${c.y}`),a.x===c.x&&(i=`M ${a.x} ${a.y} L ${c.x} ${c.y}`)):"BT"===it?(a.x<c.x&&(i=n.type===r.MERGE&&e.id!==n.parents[0]?`M ${a.x} ${a.y} L ${a.x} ${c.y+$} ${d} ${a.x+m} ${c.y} L ${c.x} ${c.y}`:`M ${a.x} ${a.y} L ${c.x-$} ${a.y} ${h} ${c.x} ${a.y-m} L ${c.x} ${c.y}`),a.x>c.x&&(h="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",$=20,m=20,i=n.type===r.MERGE&&e.id!==n.parents[0]?`M ${a.x} ${a.y} L ${a.x} ${c.y+$} ${h} ${a.x-m} ${c.y} L ${c.x} ${c.y}`:`M ${a.x} ${a.y} L ${c.x-$} ${a.y} ${h} ${c.x} ${a.y-m} L ${c.x} ${c.y}`),a.x===c.x&&(i=`M ${a.x} ${a.y} L ${c.x} ${c.y}`)):(a.y<c.y&&(i=n.type===r.MERGE&&e.id!==n.parents[0]?`M ${a.x} ${a.y} L ${c.x-$} ${a.y} ${d} ${c.x} ${a.y+m} L ${c.x} ${c.y}`:`M ${a.x} ${a.y} L ${a.x} ${c.y-$} ${h} ${a.x+m} ${c.y} L ${c.x} ${c.y}`),a.y>c.y&&(i=n.type===r.MERGE&&e.id!==n.parents[0]?`M ${a.x} ${a.y} L ${c.x-$} ${a.y} ${h} ${c.x} ${a.y-m} L ${c.x} ${c.y}`:`M ${a.x} ${a.y} L ${a.x} ${c.y+$} ${d} ${a.x+m} ${c.y} L ${c.x} ${c.y}`),a.y===c.y&&(i=`M ${a.x} ${a.y} L ${c.x} ${c.y}`));if(void 0===i)throw new Error("Line definition not found");t.append("path").attr("d",i).attr("class","arrow arrow"+l%8)}),"drawArrow"),Mt=o(((t,r)=>{const e=t.append("g").attr("class","commit-arrows");[...r.keys()].forEach((t=>{const n=r.get(t);n.parents&&n.parents.length>0&&n.parents.forEach((t=>{Tt(e,r.get(t),n,r)}))}))}),"drawArrows"),vt=o(((t,r)=>{const e=t.append("g");r.forEach(((t,r)=>{const n=r%8,o=nt.get(t.name)?.pos;if(void 0===o)throw new Error(`Position not found for branch ${t.name}`);const a=e.append("line");a.attr("x1",0),a.attr("y1",o),a.attr("x2",st),a.attr("y2",o),a.attr("class","branch branch"+n),"TB"===it?(a.attr("y1",30),a.attr("x1",o),a.attr("y2",st),a.attr("x2",o)):"BT"===it&&(a.attr("y1",st),a.attr("x1",o),a.attr("y2",30),a.attr("x2",o)),ct.push(o);const c=t.name,s=dt(c),i=e.insert("rect"),h=e.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+n);h.node().appendChild(s);const d=s.getBBox();i.attr("class","branchLabelBkg label"+n).attr("rx",4).attr("ry",4).attr("x",-d.width-4-(!0===tt?.rotateCommitLabel?30:0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),h.attr("transform","translate("+(-d.width-14-(!0===tt?.rotateCommitLabel?30:0))+", "+(o-d.height/2-1)+")"),"TB"===it?(i.attr("x",o-d.width/2-10).attr("y",0),h.attr("transform","translate("+(o-d.width/2-5)+", 0)")):"BT"===it?(i.attr("x",o-d.width/2-10).attr("y",st),h.attr("transform","translate("+(o-d.width/2-5)+", "+st+")")):i.attr("transform","translate(-19, "+(o-d.height/2)+")")}))}),"drawBranches"),Pt=o((function(t,r,e,n,o){return nt.set(t,{pos:r,index:e}),r+=50+(o?40:0)+("TB"===it||"BT"===it?n.width/2:0)}),"setBranchPosition");t("diagram",{parser:Q,db:F,renderer:{draw:o((function(t,r,e,n){if(ht(),$.debug("in gitgraph renderer",t+"\n","id:",r,e),!tt)throw new Error("GitGraph config not found");const o=tt.rotateCommitLabel??!1,a=n.db;at=a.getCommits();const c=a.getBranchesAsObjArray();it=a.getDirection();const s=l(`[id="${r}"]`);let i=0;c.forEach(((t,r)=>{const e=dt(t.name),n=s.append("g"),a=n.insert("g").attr("class","branchLabel"),c=a.insert("g").attr("class","label branch-label");c.node()?.appendChild(e);const h=e.getBBox();i=Pt(t.name,i,r,h,o),c.remove(),a.remove(),n.remove()})),kt(s,at,!1),tt.showBranches&&vt(s,c),Mt(s,at),kt(s,at,!0),g.insertTitle(s,"gitTitleText",tt.titleTopMargin??0,a.getDiagramTitle()),y(void 0,s,tt.diagramPadding,tt.useMaxWidth)}),"draw")},styles:o((t=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map((r=>`\n        .branch-label${r} { fill: ${t["gitBranchLabel"+r]}; }\n        .commit${r} { stroke: ${t["git"+r]}; fill: ${t["git"+r]}; }\n        .commit-highlight${r} { stroke: ${t["gitInv"+r]}; fill: ${t["gitInv"+r]}; }\n        .label${r}  { fill: ${t["git"+r]}; }\n        .arrow${r} { stroke: ${t["git"+r]}; }\n        `)).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${t.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}\n  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}\n  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }\n  .tag-hole { fill: ${t.textColor}; }\n\n  .commit-merge {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${t.textColor};\n  }\n`),"getStyles")})}}}));
